#! /usr/bin/env python

import os.path
import argparse
import logging
import time
import thread

# cmd args
parser = argparse.ArgumentParser()
parser.add_argument(
    '-v',
    help="Print logs from DEBUG level and up",
    action="store_const", dest="loglevel", const=logging.DEBUG,
    default=logging.INFO,
)
args = parser.parse_args()

# add lib to loading path
import sys
homepath = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
libpath = os.path.join(homepath, "lib")
sys.path.append(
    os.path.abspath(libpath)
)

# setup logging
logging.basicConfig(
    level=args.loglevel,
    format= "[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s",
    datefmt="%H:%M:%S"
)

logger = logging.getLogger(__name__)

# launch xhpy compiler
from cat.xhpy.xhpycompiler import XHPyCompiler

# XHPyCompiler.debug()

XHPyCompiler.compile_dir(
    add_gitignore=(
        os.path.abspath(
            os.path.join(os.path.dirname(__file__), "..")
        ),
        os.path.abspath(
            os.path.join(os.path.dirname(__file__), "..", ".gitignore")
        )
    )
)

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent
import imp
class XHPyEventHanlder(FileSystemEventHandler):

    def on_modified(self, event):
        if isinstance(event, FileModifiedEvent):
            p = os.path.abspath(os.path.join(homepath, event.src_path))
            _, ext = os.path.splitext(p)
            if ext == '.xhpy':
                XHPyCompiler.compile_file(p)
                # just compile, as tornado will reload the file for us

def xhpy_observe():
    observer = Observer()
    observer.schedule(XHPyEventHanlder(), libpath, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

thread.start_new_thread(xhpy_observe, ());
logger.info('xhpy observer started on dir: {}'.format(libpath))

# launch http server
from cat.server import WebServer
WebServer.start()

observer.join()